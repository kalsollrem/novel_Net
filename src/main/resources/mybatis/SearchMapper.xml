<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.novelnet.repository.SearchMapper">
    <resultMap type="com.project.novelnet.Vo.NovelVO" id="novelVO">
        <result column="u_num" property="u_num"/>
        <result column="n_title" property="n_title"/>
        <result column="n_introduction" property="n_introduction"/>
        <result column="n_type" property="n_type"/>
        <result column="m_date" property="m_date"/>
        <result column="n_monopoly" property="n_monopoly"/>
        <result column="n_fin" property="n_fin"/>
    </resultMap>

    <!--  소설검색  -->

    <!--  게시물 검색 + 번호매기기  -->
    <select id="findBest" resultType="com.project.novelnet.Vo.NovelVO">
        SELECT A.n_num, A.u_num, A.n_title, A.n_introduction, A.n_cover, A.n_fin, b.count, c.u_nick as nick
        FROM novel A
        <if test="findtype.equals('count')">
            LEFT JOIN (select sum(m_count)as count, n_num from memo group by n_num)B
            on A.n_num = B.n_num
        </if>
        <if test="findtype.equals('best')">
            LEFT JOIN (select sum(m_good)as count, n_num from memo group by n_num)B
            on A.n_num = B.n_num
        </if>
        <if test="findtype.equals('bookmark')">
            LEFT JOIN (select count(bm_num) as count, n_num from bookmark group by n_num)B
            on A.n_num = B.n_num
        </if>
        LEFT join user C
        on A.u_num = C.u_num
        order by count desc
        limit #{limit}
    </select>

    <!-- collection = list냐 array냐    -->
    <!-- item       = #{}에 들어갈 명칭   -->
    <!-- separator  = 배열 내에서 나누는 기준(일반적으로 ',') -->
    <!-- open       = 시작시 들어갈 단어   -->
    <!-- close      = 마무리에 들어갈 단어  -->
    <!-- <![CDATA[ < ]]>  = '<'사용시 오류뜸  -->
    <select id="findPdPick" parameterType="java.util.List" resultType="com.project.novelnet.Vo.NovelVO">
        (select A.n_num, A.n_title, A.n_cover, A.n_monopoly, A.n_stop, B.u_nick as nick, @rownum := 0 AS noType
        from novel A
        Left join user B
        on A.u_num = B.u_num
        ,(SELECT @rownum :=0) AS r
        where A.n_num IN
        <foreach collection="list" item="pdlist" separator="," open="(" close=")" index="index">
           #{pdlist}
        </foreach>
        and not n_num is null
        limit 6)
        UNION ALL
        (select A.n_num, A.n_title, A.n_cover, A.n_monopoly, A.n_stop, B.u_nick as nick, @rownum := 1 AS noType
        from novel A
        Left  join user B
        on A.u_num = B.u_num
        ,(SELECT @rownum := 0) AS r
        where A.n_monopoly = 'only' and A.n_stop <![CDATA[ < ]]> 5
        order by rand()
        limit 6)
    </select>

    <!-- 북마크 검색-->
    <!-- LIMIT 18446744073709551615 가 있어야 재정렬됨 -->
    <!-- 소설 테이블 : 소설 번호, 작가 , 소개
         메모테이블  : 최신 업데이트일
         소설기록    : join통해 자기 유저명으로 검색해서 범위좁힘.
         유저테이블  : 소설테이블의 작가번호와 연동하여 닉네임.-->
    <select id="getBookmarkList" resultType="com.project.novelnet.Vo.NovelVO">
        select
            A.n_num, A.u_num, A.n_title, A.n_introduction,
            sum(B.m_count) as m_count, sum(B.m_good) as m_good, count(case when B.m_type='ep' then 1 end)as ep_count, B.m_date,
            C.m_num as last_ep,
            D.u_nick as nick
        from novel A
        left join (select * from memo order by m_date desc LIMIT 18446744073709551615) B
        on A.n_num = B.n_num
        join
            (select * from
                  (select n_num, m_num, u_num from m_record where u_num = #{u_num} order by n_num asc, mr_num desc LIMIT 18446744073709551615) as m_record
            group by n_num) C
        on A.n_num = c.n_num
        left join user D
        on A.u_num = D.u_num
        group by A.n_num
        order by n_num;
    </select>
</mapper>

