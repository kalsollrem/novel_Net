<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.novelnet.repository.MasterMapper">
    <resultMap type="HashMap" id="NovelShingoMap">
        <id column="mw_num"  property="mw_num"/>
        <id column="n_num"   property="n_num"/>
        <id column="m_num"   property="m_num"/>
        <id column="u_num"   property="u_num"/>
        <id column="nick"    property="nick"/>
        <id column="w_why"   property="w_why"/>
        <id column="mw_date" property="mw_date"/>
        <id column="b_stop"  property="b_stop"/>
        <id column="n_title" property="n_title"/>
        <id column="m_title" property="m_title"/>
        <id column="wNick"   property="wNick"/>
        <id column="U_LEVEL" property="U_LEVEL"/>
        <id column="wU_num"  property="wU_num"/>
        <id column="wU_mail"  property="wU_mail"/>
    </resultMap>

    <resultMap type="HashMap" id="ReplyShingoMap">
        <id column="rw_num"   property="rw_num"/>
        <id column="r_num"    property="r_num"/>
        <id column="nick"     property="nick"/>
        <id column="r_memo"   property="r_memo"/>
        <id column="r_date"   property="r_date"/>
        <id column="r_bad"    property="r_bad"/>
        <id column="r_state"  property="r_state"/>
        <id column="u_num"    property="u_num"/>
        <id column="wNick"    property="wNick"/>
        <id column="wU_num"   property="wU_num"/>
        <id column="wU_mail"  property="wU_mail"/>
        <id column="U_LEVEL"  property="U_LEVEL"/>
        <id column="m_num"    property="m_num"/>
        <id column="n_num"    property="n_num"/>
        <id column="n_title"  property="n_title"/>
        <id column="m_title"  property="m_title"/>
    </resultMap>

    <!--resultType이 아니라 resultMap을 사용해 연동 -->
    <!--신고당한 소설 리스트 -->
    <select id="novelShingo" resultType="com.project.novelnet.Vo.MasterVO.MasterNovel">
        SELECT A.mw_num, A.n_num, A.m_num, A.u_num, E.nick, A.w_why, date_format(A.mw_date, '%y. %m. %d. (%H:%i)')as mw_date,
               F.b_stop, C.n_title, B.m_title,
               D.U_NUM as wU_num, D.wNick, D.U_LEVEL ,D.wU_mail
        FROM m_warning A
        left join (select m_num, m_title from memo) B
        on A.m_num = B.m_num
        left join (select n_title, n_num, u_num as writter from novel)C
        on A.n_num = c.n_num
        LEFT JOIN (SELECT U_NUM, U_NICK as wNick, u_mail as wU_mail, U_LEVEL from user) D
        ON c.writter = D.u_num
        LEFT JOIN (SELECT U_NUM, ifnull(u_nick, u_mail) as nick from user) E
        ON A.u_num = E.u_num
        LEFT JOIN (SELECT m_num, count(mw_num) as b_stop from m_warning group by m_num) F
        ON A.m_num = F.m_num
        <choose>
            <when test="searchType.equals('nick')">
                WHERE E.nick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('title')">
                WHERE C.n_title like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('wNick')">
                WHERE D.wNick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('novelNum')">
                WHERE A.n_num = #{keyword}
            </when>
            <when test="searchType.equals('userNum')">
                WHERE D.U_NUM  = #{keyword}
            </when>
        </choose>
        ORDER BY mw_date DESC
        Limit #{start},10
    </select>


    <select id="novelShingoCnt" resultType="int">
        SELECT count(A.mw_num) as cnt
        FROM m_warning A
        left join (select m_num, m_title from memo) B
        on A.m_num = B.m_num
        left join (select n_title, n_num, u_num as writter from novel)C
        on A.n_num = c.n_num
        LEFT JOIN (SELECT U_NUM, U_NICK as wNick, u_mail as wU_mail, U_LEVEL from user) D
        ON c.writter = D.u_num
        LEFT JOIN (SELECT U_NUM, ifnull(u_nick, u_mail) as nick from user) E
        ON A.u_num = E.u_num
        LEFT JOIN (SELECT m_num, count(mw_num) as b_stop from m_warning group by m_num) F
        ON A.m_num = F.m_num
        <choose>
            <when test="searchType.equals('nick')">
                WHERE E.nick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('title')">
                WHERE C.n_title like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('wNick')">
                WHERE D.wNick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('novelNum')">
                WHERE A.n_num = #{keyword}
            </when>
            <when test="searchType.equals('userNum')">
                WHERE D.U_NUM  = #{keyword}
            </when>
        </choose>
    </select>


    <select id="replyShingo" resultType="com.project.novelnet.Vo.MasterVO.MasterReply">
        select A.rw_num, A.r_num, UB.nick,
               B.r_memo, date_format(B.r_date, '%y. %m. %d. (%H:%i)')as r_date, B.r_bad, B.r_state, B.u_num, UA.wNick, UA.wU_mail, UA.U_LEVEL, UA.U_NUM as wU_num,
               C.m_num, C.m_title,
               D.n_num, D.n_title,
               CNT.bad_cnt
          from (select rw_num, r_num, u_num from r_warning)A
        left join (select r_num, u_num, r_memo, m_num, n_num, r_date, r_bad, ifnull(r_state, 'ok')as r_state  from reply) B
               on A.r_num = B.r_num
        left join (select m_num, m_title from memo)C
               on C.m_num = B.m_num
        left join (select n_title, n_num from novel)D
               on B.n_num = D.n_num
        LEFT JOIN (SELECT U_NUM, U_NICK as wNick, u_mail as wU_mail, U_LEVEL from user) UA
               ON b.u_num = UA.u_num
        LEFT JOIN (SELECT U_NUM, ifnull(u_nick, u_mail) as nick from user) UB
               ON a.u_num = UB.u_num
        left join(select r_num, count(r_num) as bad_cnt from r_warning group by r_num) CNT
               on A.r_num = CNT.r_num
        where UA.u_num is not null and A.r_num != 'none' and B.r_state != 'blind'
        <choose>
            <when test="searchType.equals('nick')">
                and UB.nick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('title')">
                and D.n_title like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('wNick')">
                and UA.wNick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('userNum')">
                and UA.U_NUM = #{keyword}
            </when>
            <when test="searchType.equals('novelNum')">
                and A.r_num = #{keyword}
            </when>
        </choose>
        ORDER BY r_date DESC
        Limit #{start},10
    </select>


    <select id="replyShingoCnt" resultType="int">
        select count(rw_num) as cnt
             from (select rw_num, r_num, u_num from r_warning)A
        left join (select r_num, u_num, r_memo, m_num, n_num, r_date, r_bad, ifnull(r_state, 'ok')as r_state  from reply) B
               on A.r_num = B.r_num
        left join (select m_num, m_title from memo)C
               on C.m_num = B.m_num
        left join (select n_title, n_num from novel)D
               on B.n_num = D.n_num
        LEFT JOIN (SELECT U_NUM, U_NICK as wNick, u_mail as wU_mail, U_LEVEL from user) UA
               ON b.u_num = UA.u_num
        LEFT JOIN (SELECT U_NUM, ifnull(u_nick, u_mail) as nick from user) UB
               ON a.u_num = UB.u_num
        left join(select r_num, count(r_num) as bad_cnt from r_warning group by r_num) CNT
               on A.r_num = CNT.r_num
        where UA.u_num is not null and A.r_num != 'none' and B.r_state != 'blind'
        <choose>
            <when test="searchType.equals('nick')">
                and UB.nick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('title')">
                and D.n_title like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('wNick')">
                and UA.wNick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('userNum')">
                and UA.U_NUM = #{keyword}
            </when>
            <when test="searchType.equals('novelNum')">
                and A.r_num = #{keyword}
            </when>
        </choose>
    </select>





<!---->
<!---->
<!---->

    <select id="novelCnt" resultType="int">
        select  count(A.n_num) as t
        from (select n_num, n_title, u_num, stopPoint from novel)A
        left join (select u_num, u_nick as nick, u_mail from user) C
        on A.u_num = C.u_num
        inner join
        (select n_num, group_concat(h_tag order by t_carte asc separator' ' ) as tag_Line
        from (select n_num, t_carte, concat(<![CDATA['<',h_tag,'>']]>)as h_tag from hashtag)tagChange
        group by n_num order by h_tag) DD
        on A.n_num = DD.n_num
        left join (select n_num, m_num, count(m_count) as n_chapters, count(m_count) as n_count, sum(m_good) as n_good from memo group by n_num) E
        on A.n_num = E.n_num
        left join (select n_num, count(mw_num)as shingoCnt from m_warning group by n_num) F
        on A.n_num = F.n_num
        where A.n_num is not null
        <choose>
            <when test="searchType.equals('nick')">
                and C.nick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('title')">
                and A.n_title like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('tag')">
                and DD.tag_Line like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('novelNum')">
                and A.n_num = #{keyword}
            </when>
        </choose>
        <choose>
            <when test="sort.equals('shingoD')">
                order by F.shingoCnt desc
            </when>
            <when test="sort.equals('shingoA')">
                order by F.shingoCnt asc
            </when>
            <when test="sort.equals('stop')">
                and A.stopPoint>0
            </when>
        </choose>
    </select>

    <select id="masterNovelList" resultType="com.project.novelnet.Vo.NovelVO">
        select  A.n_num, A.n_introduction,  A.n_title, A.n_cover, A.stopPoint,
                C.u_num, IFNULL(C.nick,'탈퇴한 유저입니다')as nick, C.u_pic, IFNULL(C.u_mail,'')as u_mail, C.u_level,
                D.all_tag, ifnull(E.n_chapters,0) as n_chapters, ifnull(E.n_count,0) as n_count, ifnull(E.n_good,0) as n_good,
                E.m_num,
                ifnull(F.shingoCnt,0) as shingoCnt, ifnull(G.pd_num,0) as pd_num
        from (select n_num, n_introduction, n_title, n_cover, u_num, stopPoint from novel)A
        left join (select u_num, u_nick as nick, u_pic, u_mail,u_level from user) C
        on A.u_num = C.u_num
        inner join
                (select n_num, group_concat(h_tag order by t_carte asc separator' ' ) as All_tag
                from (select n_num, t_carte, concat(<![CDATA['<span>[',h_tag,']</span>']]>)as h_tag from hashtag)tagChange
                group by n_num order by h_tag) D
        on A.n_num = D.n_num
        inner join
        (select n_num, group_concat(h_tag order by t_carte asc separator' ' ) as tag_Line
        from (select n_num, t_carte, concat(<![CDATA['<',h_tag,'>']]>)as h_tag from hashtag)tagChange
        group by n_num order by h_tag) DD
        on A.n_num = DD.n_num
        left join (select n_num, m_num, count(m_count) as n_chapters, count(m_count) as n_count, sum(m_good) as n_good from memo group by n_num) E
        on A.n_num = E.n_num
        left join (select n_num, count(mw_num)as shingoCnt from m_warning group by n_num) F
        on A.n_num = F.n_num
        left join (select n_num, pd_num from pd_pick group by n_num) G
        on A.n_num = G.n_num
        where A.n_num is not null
        <choose>
            <when test="searchType.equals('nick')">
                and C.nick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('title')">
                and A.n_title like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('tag')">
                and DD.tag_Line like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('novelNum')">
                and A.n_num = #{keyword}
            </when>
        </choose>
        <choose>
            <when test="sort.equals('shingoD')">
                order by F.shingoCnt desc
            </when>
            <when test="sort.equals('shingoA')">
                order by F.shingoCnt asc
            </when>
            <when test="sort.equals('stop')">
                and A.stopPoint>0
            </when>
            <otherwise>
                order by A.n_num desc
            </otherwise>
        </choose>
        limit #{start},10
    </select>

    <select id="pdPickList" resultType="com.project.novelnet.Vo.PdPickVO">
        select row_number() over(order by A.pd_num desc) as number, A.pd_num, A.n_num, B.n_title from (select pd_num, n_num from pd_pick)A
        left join (select n_num, n_title from novel)  B
        on A.n_num = B.n_num
    </select>


    <select id="masterUserList" resultType="com.project.novelnet.Vo.UserVO">
        select
            A.u_num, A.u_nick, A.u_mail, date_format(A.u_regdate, '%y. %m. %d. (%H:%i)')as u_regdate, A.u_myself, A.u_level, A.u_pic, A.u_ok,
            ifnull(B.reRcnt, '0')as reRcnt,
            ifnull(C.goRcnt, '0')as goRcnt,
            ifnull(D.reNcnt, '0')as reNcnt,
            ifnull(E.goNcnt, '0')as goNcnt
        from        (select u_num, u_nick, u_mail, u_regdate, u_myself, u_level, u_pic, u_ok from user)A
        left join   (select sum(A.cnt)as reRcnt, B.u_num from (select count(r_num) as cnt, r_num, rw_num from r_warning group by r_num)A
                     left join (select r_num, u_num from reply )B
                     on A.r_num = B.r_num
                     group by B.u_num )B
        on A.u_num = B.u_num
        left join   (select count(u_num)as goRcnt, u_num from r_warning group by u_num)C
        on A.u_num = C.u_num
        left join   (select B.u_num, sum(A.Ncnt)as reNcnt from(select n_num, count(n_num) as Ncnt from m_warning group by n_num)A
                     left join (select u_num, n_num from novel)B
                     on A.n_num = B.n_num
                     group by B.u_num)D
        on A.u_num = D.u_num
        left join   (select u_num, count(u_num) as goNcnt from m_warning group by u_num) E
        on A.u_num = E.u_num
        where A.u_num is not null
        <choose>
            <when test="searchType.equals('nick')">
                and A.u_nick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('mail')">
                and A.u_mail like CONCAT('%',#{keyword},'%')
            </when>
        </choose>
        <choose>
            <when test="sort.equals('reRcntA')">
                order by B.reRcnt asc
            </when>
            <when test="sort.equals('reRcntD')">
                order by B.reRcnt desc
            </when>
            <when test="sort.equals('goRcntA')">
                order by C.goRcnt asc
            </when>
            <when test="sort.equals('goRcntD')">
                order by C.goRcnt desc
            </when>
            <when test="sort.equals('reNcntA')">
                order by D.reNcnt asc
            </when>
            <when test="sort.equals('reNcntD')">
                order by D.reNcnt desc
            </when>
            <when test="sort.equals('goNcntA')">
                order by E.goNcnt asc
            </when>
            <when test="sort.equals('goNcntD')">
                order by E.goNcnt desc
            </when>
            <when test="sort.equals('stop')">
                and A.u_level = 1
            </when>
            <when test="sort.equals('alive')">
                and A.u_level != 1
            </when>
            <when test="sort.equals('noOk')">
                and A.u_ok = 0 order by A.u_ok desc
            </when>
            <otherwise>
                order by A.u_regdate desc
            </otherwise>
        </choose>
        limit #{start},10
    </select>

    <select id="userCnt" resultType="int">
        select
        count(A.u_num) as cnt
        from        (select u_num, u_nick, u_mail, u_regdate, u_myself, u_level, u_pic, u_ok from user)A
        left join   (select sum(A.cnt)as reRcnt, B.u_num from (select count(r_num) as cnt, r_num, rw_num from r_warning group by r_num)A
        left join (select r_num, u_num from reply )B
        on A.r_num = B.r_num
        group by B.u_num )B
        on A.u_num = B.u_num
        left join   (select count(u_num)as goRcnt, u_num from r_warning group by u_num)C
        on A.u_num = C.u_num
        left join   (select B.u_num, sum(A.Ncnt)as reNcnt from(select n_num, count(n_num) as Ncnt from m_warning group by n_num)A
        left join (select u_num, n_num from novel)B
        on A.n_num = B.n_num
        group by B.u_num)D
        on A.u_num = D.u_num
        left join   (select u_num, count(u_num) as goNcnt from m_warning group by u_num) E
        on A.u_num = E.u_num
        where A.u_num is not null
        <choose>
            <when test="searchType.equals('nick')">
                and A.u_nick like CONCAT('%',#{keyword},'%')
            </when>
            <when test="searchType.equals('mail')">
                and A.u_mail like CONCAT('%',#{keyword},'%')
            </when>
        </choose>
        <choose>
            <when test="sort.equals('reRcntA')">
                order by B.reRcnt asc
            </when>
            <when test="sort.equals('reRcntD')">
                order by B.reRcnt desc
            </when>
            <when test="sort.equals('goRcntA')">
                order by C.goRcnt asc
            </when>
            <when test="sort.equals('goRcntD')">
                order by C.goRcnt desc
            </when>
            <when test="sort.equals('reNcntA')">
                order by D.reNcnt asc
            </when>
            <when test="sort.equals('reNcntD')">
                order by D.reNcnt desc
            </when>
            <when test="sort.equals('goNcntA')">
                order by E.goNcnt asc
            </when>
            <when test="sort.equals('goNcntD')">
                order by E.goNcnt desc
            </when>
            <when test="sort.equals('stop')">
                and A.u_level = 1
            </when>
            <when test="sort.equals('alive')">
                and A.u_level != 1
            </when>
            <when test="sort.equals('noOk')">
                and A.u_ok = 0
            </when>
        </choose>
    </select>



    <!-- 공지등록 -->
    <insert id="writeGongji" parameterType="com.project.novelnet.Vo.MasterVO.MasterMemoVO">
        <selectKey resultType="int" keyProperty="ma_num" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        <choose>
            <when test="ma_type.equals('gong')">
                INSERT INTO mastermemo(u_num, ma_title, ma_memo, ma_type)
                VALUES (#{u_num},#{ma_title},#{ma_memo},'gong')
            </when>
            <when test="ma_type.equals('event')">
                INSERT INTO mastermemo(u_num, ma_title, ma_memo, ma_cover,ma_type)
                VALUES (#{u_num},#{ma_title},#{ma_memo},#{ma_cover},'event')
            </when>
        </choose>
    </insert>

    <!--공지수정  -->
    <update id="reWriteGongJi" parameterType="com.project.novelnet.Vo.MasterVO.MasterMemoVO">
        <choose>
            <when test="imageOn.equals('on')">
                update mastermemo
                set
                    ma_title = #{ma_title},
                    ma_memo = #{ma_memo},
                    ma_type = #{ma_type},
                    ma_date = SYSDATE(),
                    ma_cover = #{ma_cover}
                where ma_num=#{ma_num}
            </when>
            <when test="imageOn.equals('off')">
                update mastermemo
                set
                    ma_title = #{ma_title},
                    ma_memo = #{ma_memo},
                    ma_type = #{ma_type},
                    ma_date = SYSDATE()
                where ma_num=#{ma_num}
            </when>
        </choose>
    </update>
</mapper>

